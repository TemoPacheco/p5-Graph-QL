#!/usr/bin/env perl

use v5.24;
use warnings;
use experimental 'signatures', 'postderef';

use Data::Dumper;

use List::Util ();
use Path::Tiny ();

use Graph::QL::AST::Node;
use Graph::QL::Util::Strings;

## ...

my $class_dir = Path::Tiny::path('lib/Graph/QL/AST/Node/');
my $role_dir  = $class_dir->child('Role');

## ...

# if the role dir exists, we need to clean it out ...
if ( -e $role_dir ) {
    $_->remove foreach $role_dir->children;
}

# now delete all files in the class dir ...
-f && $_->remove foreach $class_dir->children;

# and  make sure we have the role dir we need ...
$role_dir->mkpath unless -e $role_dir && -d $role_dir;

## ...

my @ast_lines = Path::Tiny::path('share/ast/ast.ast')->lines({ chomp => 1 });

my (%roles, %classes);

my $current;
while ( @ast_lines ) {
    my $line = shift @ast_lines;

    #warn $line;

    next if $line =~ /^#/;

    if ( $line =~ /^\s*$/ ) {
        $current = undef if $current;
        next;
    }

    my ($kind, @rest) = split /\s/ => $line;

    # union (aka - role)
    if ( $kind eq 'U' ) {
        my ($name) = @rest;
        $current = $roles{ $name } = {};
    }
    elsif ( $kind eq 'O' ) {
        my ($name) = @rest;
        $current->{$name} = 1;
    }
    # type (aka - class)
    elsif ( $kind eq 'T' ) {
        my ($name) = @rest;
        $current = $classes{ $name } = { kind => 'TYPE' };
    }
    else {
        my $is_plural   = index($kind, 'P') != -1 ? 1 : 0;
        my $is_nullable = index($kind, '?') != -1 ? 1 : 0;

        my ($type, $name) = @rest;
        $current->{fields} ||= [];
        push $current->{fields}->@* => {
            name        => Graph::QL::Util::Strings::camel_to_snake( $name ),
            type        => $type,
            is_plural   => $is_plural,
            is_nullable => $is_nullable
        };
    }
}

## ...

warn Dumper \%roles;
warn Dumper \%classes;

foreach my $role ( keys %roles ) {
    $role_dir->child( $role.'.pm' )
             ->spew( generate_role( $role, $roles{ $role } ) );
}

foreach my $class ( keys %classes ) {
    $class_dir->child( $class.'.pm' )
              ->spew( generate_class( $class, $classes{ $class } ) );
}

exit;

## ...

sub is_role    ($type) { exists $roles{ $type }   }
sub is_class   ($type) { exists $classes{ $type } }
sub is_blessed ($type) { is_role( $type ) || is_class( $type ) }

sub expand_type ($name) {
    if ( is_role( $name ) ) {
        return 'Graph::QL::AST::Node::Role::'.$name;
    }
    elsif ( is_class( $name ) ) {
        return 'Graph::QL::AST::Node::'.$name;
    }
    return $name;
}

## ....

sub generate_role ($name, $consumers) {

    my @consumers = map expand_type($_), sort keys $consumers->%*;

    my $source = q[package ].expand_type($name).q[;

use v5.24;
use warnings;

our $VERSION = '].$Graph::QL::AST::Node::VERSION.q[';

1;

__END__

=pod

This role is consumed by the following classes:

=over 4

].(join "\n\n" => map '=item C<'.$_.'>', @consumers).q[

=back

=cut
];
}

sub generate_class ($name, $definition) {

    my @slots;
    my @accessors;
    my @type_checks;
    my @constructor;

    if ( $definition->{fields} ) {
        my @inherited_fields = qw[ location ];

        my $has_nullable = List::Util::any { $_->{is_nullable} || $_->{is_plural} } $definition->{fields}->@*;

        my $name_width      = List::Util::max( map length $_->{name}, $definition->{fields}->@* );
        my $ctor_name_width = List::Util::max( map { $_ + ($has_nullable ? 1 : 0) } ($name_width || ()), map length $_, @inherited_fields );

        foreach my $field ( $definition->{fields}->@* ) {

            my $type      = expand_type( $field->{type} );
            my $validator = (is_role($field->{type}) ? 'roles::DOES' : 'isa');

            # if we have a plural field that is not nullable ...
            if ( $field->{is_plural} ) {
                push @slots       => sprintf "%-${name_width}s => sub { +[] }," => $field->{name};
                push @type_checks => (
                    (sprintf 'throw(\'The `%s` value must be an ARRAY ref\')' => $field->{name}),
                    (sprintf '    unless Ref::Util::is_arrayref( $self->{%s} );' => $field->{name}),
                    (''),
                    (sprintf 'foreach ( $self->{%s}->@* ) {', $field->{name}),
                    (sprintf '     throw(\'The values in `%s` must all be of type(%s), not `%%s`\', $_ )' => $field->{name}, $type ),
                    (is_blessed( $field->{type} )
                        ? (sprintf '        unless Ref::Util::is_blessed_ref( $_ )'."\n".'                && $_->%s(\'%s\');' => $validator, $type)
                        : (        '        unless defined $_;')),
                    ('}'),
                    (''),
                );
            }
            elsif ( $field->{is_nullable} ) {
                push @slots       => sprintf "%-${name_width}s => sub {}," => $field->{name};
                push @type_checks => (
                    (sprintf 'if ( exists $params->{%s} ) {' => $field->{name}),
                    (sprintf '    throw(\'The `%s` must be of type(%s), not `%%s`\', $self->{%s})' => $field->{name}, $type, $field->{name} ),
                    (is_blessed( $field->{type} )
                        ? (sprintf '        unless Ref::Util::is_blessed_ref( $self->{%s} )'."\n".'                && $self->{%s}->%s(\'%s\');' => $field->{name}, $field->{name}, $validator, $type)
                        : (sprintf '        unless defined $self->{%s};', $field->{name})),
                    ('}'),
                    (''),
                );
            }
            else {
                push @slots       => sprintf "%-${name_width}s => sub { die \'You must supply a `%s`\'}," => $field->{name}, $field->{name};
                push @type_checks => (
                    (sprintf 'throw(\'The `%s` must be of type(%s), not `%%s`\', $self->{%s})' => $field->{name}, $type, $field->{name} ),
                    (is_blessed( $field->{type} )
                        ? (sprintf '    unless Ref::Util::is_blessed_ref( $self->{%s} )'."\n".'            && $self->{%s}->%s(\'%s\');' => $field->{name}, $field->{name}, $validator, $type)
                        : (sprintf '    unless defined $self->{%s};', $field->{name})),
                    (''),
                );
            }

            my $constructor_field_name = $field->{name}.($field->{is_nullable} || $field->{is_plural} ? '?' : '');

            push @constructor => sprintf "%-${ctor_name_width}s => %s," => $constructor_field_name, $field->{name};
            push @accessors   => sprintf "sub %-${name_width}s : ro;" => $field->{name};
        }

        # add the location one as well
        foreach my $inherited ( @inherited_fields ) {
            push @constructor => sprintf "%-${ctor_name_width}s => super(%s)," => $inherited, $inherited;
        }
    }

    my $add_role_if_needed = "\n";
    foreach my $role ( keys %roles ) {
        if ( exists $roles{ $role }->{ $name } ) {
            $add_role_if_needed = "\n".q[use roles  '].expand_type($role).q[';]."\n";
            last;
        }
    }

    my $source = q[package ].expand_type($name).q[;

use v5.24;
use warnings;
use experimental 'signatures', 'postderef';
use decorators ':accessors', ':constructor';

use Ref::Util ();

use Graph::QL::Util::Errors 'throw';

our $VERSION = '].$Graph::QL::AST::Node::VERSION.q[';

use parent 'Graph::QL::AST::Node';]
.$add_role_if_needed.
(@slots ?
q[use slots (
    ].(join "\n    " => @slots).q[
);
] : '').
(@type_checks ? q[
sub BUILDARGS : strict(
    ].(join "\n    " => @constructor).q[
);
] : '').
(@type_checks ? q[
sub BUILD ($self, $params) {

    ].(join "\n    " => @type_checks).q[
}
] : '').
(@accessors ? q[
].(join "\n" => @accessors) : '').q[

1;

__END__

=pod

=cut
];
}

